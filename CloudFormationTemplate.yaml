AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Assignment 3

Resources:
  s3BucketEmailStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: a3-email-storage-v6
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  s3BucketEmailStoragePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3BucketEmailStorage
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3BucketEmailStorage
                - /*
            Principal: '*'

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"

  codepipelinebucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: a3codepipeline-v6
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
  
  codepipelinebucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref codepipelinebucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref codepipelinebucket
                - /*
            Principal: '*'

  a3codepipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt RootRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref codepipelinebucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Repo: "AWS-Email-Spam-Detector"
                Branch: "master"
                OAuthToken: "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"
                Owner: "yukti99"
                PollForSourceChanges: "true"
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: [ ]
              Region: "us-west-2"
              Namespace: SourceVariables
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: "spam-project-pipeline"
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              Region: "us-west-2"
              Namespace: BuildVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              RunOrder: 1
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                Capabilities: CAPABILITY_AUTO_EXPAND, CAPABILITY_IAM
                RoleArn: !GetAtt RootRole.Arn
                StackName: "spam-detector-stack"
                TemplatePath: BuildArtifact::outputsamtemplate.yml
              OutputArtifacts: [ ]
              InputArtifacts:
                - Name: BuildArtifact
              Region: us-west-2
              Namespace: DeployVariables

  ReceiptRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: email-receiving-set

  ReceiptRule1:
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref ReceiptRuleSet
      Rule:
        Name: email-rule
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Optional
        Actions:
          - S3Action: 
              BucketName: !Ref s3BucketEmailStorage
  