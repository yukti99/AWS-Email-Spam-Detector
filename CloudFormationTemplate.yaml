AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Assignment 3



Resources:
  s3BucketEmailStorage:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: email-storage-bucket-v2
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt LambdaFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  s3BucketEmailStoragePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3BucketEmailStorage
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3BucketEmailStorage
                - /*
            Principal: '*'

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: email_spam_detector_2
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Description: ""
      MemorySize: 128
      Timeout: 183
      Role: "arn:aws:iam::201565561775:role/admin-role-lambda"
      Environment:
        Variables:
          SAGEMAKERENDPOINT: sms-spam-classifier-mxnet-2021-11-29-02-08-53-406
          REGION: us-west-2
      Layers:
        - arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python36-SciPy1x:35
      Code:
        S3Bucket: 'a3-lambda-zip-bucket'
        S3Key: !Sub 'Archive.zip'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 'arn:aws:s3:::testing-email-storage-bucket-v2'

  ReceiptRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: email-receiving-set

  ReceiptRule1:
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref ReceiptRuleSet
      Rule:
        Name: email-rule
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Optional
        Actions:
          - S3Action:
              BucketName: !Ref s3BucketEmailStorage


#  LambdaTrigger:
#    Type: 'Custom::LambdaTrigger'
#    DependsOn: LambdaInvokePermission
#    Properties:
#      ServiceToken: !GetAtt LambdaFunction.Arn
#      LambdaArn: !GetAtt LambdaFunction.Arn
#      Bucket: !Ref s3BucketEmailStorage